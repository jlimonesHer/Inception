
*instalar  docker ubuntu
    sudo apt update
    sudo apt install apt-transport-https ca-certificates curl software-properties-common
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
    sudo apt update
    apt-cache policy docker-ce
    sudo apt install docker-ce

*Comprobar que esta corriendo
    sudo systemctl status docker

*hay que cambiar los permisos de usuario porque docker solo deja utilizarlo al super usuario
sudo usermod -aG docker ${USER}
    su - ${USER}
*confirmar que se agrego el usuario.
    id -nG

*Declarar un usuario nuevo
    sudo usermod -aG docker username

*uso de docker
    docker [option] [command] [arguments]

*Si desea ver las opciones disponibles para un comando específico, escriba lo siguiente:
    docker docker-subcommand --help

*Para ver información sobre Docker relacionada con todo el sistema, utilice lo siguiente:
    docker info


---trabajar con imagenes docker

*Para verificar si puede acceder a imágenes y descargarlas de Docker Hub, escriba lo siguiente:
    docker run hello-world

*Buscar imagenes en dockerhub
    docker search ubuntu

*instalar docker compose 
    sudo apt install docker-compose

*****PASOS PARA INCEPTION*****

*Eliminar todas la imagenes de docker
docker system prune -a

Dockerfile NGINX:
    FROM debian:buster -> pedira a docker la imagen de este SO

    RUN apt-get update -> actualizara la imagen -y
    RUN apt-get install -y nginx openssl -> instalara el servidor con el servicio openssl

*****Inception From guide*****

En el dockerfile de nginx la primera linea sera:
1    FROM debian:buster -> esto descargara y instalara en su contenedor este sistema operativo.

Lo siguiente sera construir el contenedor indicandole la ruta del dockerfile
2    docker build srcs/reequeriments/nginx -t micontenedor -> con esto construira su contenedor con debian, -t indica le dara el nombre de "micontenedor".

con esto levantara el contenedor(desde la carpeta nginx)
3    docker run ./ -t nginx

Le podemos indicar -it para acceder directamente a la terminal del contenedor.
4    docker run -it nginx

Dentro de nuestro contenedor:
5   apt update / apt upgrade /apt install nginx -y(En dockerfile con RUN)

6, 7, 8 En el docker file:
RUN     mkdir -p /etc/nginx/ssl
RUN     apt install OpenSSL -y
RUN     openssl req -x509 -sha256 -nodes \
        -days365 -newkey ras:4096 \
        -out /etc/ssl/certs/inception-.ctr \
        -keyout  /etc/ssl/private/inception-.key \
        -subj "C=ES/ST=Andalucia/L=Malaga/O=42/OU=42/CN=jlimones.42.fr/UID=jlimones"

# creamos una carpeta para los archivos de configuracion de nginx
RUN     mkdir -p /var/run/nginx

# modificaremos despues el nginx.conf

COPY conf/nginx.conf /etc/nginx/nginx.conf

*****nginx.conf*****

events {
	worker_connections 1024;
}

http{
    #yes we can
    server {
        listen 443 ssl;                                      
        ssl_protocols TLSv1.2 TLSv1.3;                       
        ssl_certificate /etc/nginx/ssl/inception.ctr;
        ssl_certificate_key /etc/nginx/ssl/inception.key;
        #root and index and server_name
        root /var/www/html;
        server_name localhost;
        index index.php index.html index.htm;
    # location / {
    #     try_files $uri $uri/ = 404;
    # }

    # location ~ \.php$ {								
    #     include snippets/fastcgi-php.conf;
    #     #fastcgi_pass wordpress:9000;				
    # }
    }
}


Garantiza los permisos
RUN chmod 755 /var/www/html                     #La raiz principal
RUN chown -R www-data:www-data /var/www/html c  #El usuario principal

CMD [ "nginx", "-g", "daemon off;" ]               #Esto inica NGINX en primer plano para que no se detenga.

--Para probar si el servidor esta corriendo:
    docker build -t (image_name)
    docker run -it (image_name)


*****MARIADB*****

service mysql start;
mysql -e "CREATE DATABASE IF NOT EXISTS \`${SQL_DATABASE}\`;"
mysql -e "CREATE USER IF NOT EXISTS \`${SQL_USER}\`@'localhost' IDENTIFIED BY '${SQL_PASSWORD}';"
mysql -e "GRANT ALL PRIVILEGES ON \`${SQL_DATABASE}\`.* TO \`${SQL_USER}\`@'%' IDENTIFIED BY '${SQL_PASSWORD}';"
mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '${SQL_ROOT_PASSWORD}';"
mysql -e "FLUSH PRIVILEGES;"
mysqladmin -u root -p$SQL_ROOT_PASSWORD shutdown
exec mysqld_safe

					
[mysqld]
datadir = /var/lib/mysql
socket  = /run/mysqld/mysqld.sock
bind_address=*
port = 3306
user = mysql


FROM debian:buster

RUN     apt update -y
RUN     apt upgrade -y
RUN     apt install mariadb-server -y

COPY /conf/50-server.cnf	/etc/mysql/mariadb.conf.d/50-server.cnf
COPY ./tools/script.sh /script.sh

RUN chmod +x /script.sh
#ADD ./tools/script.sh /
RUN /script.sh
# COPY ../../.env /.envx


*****Wordpress*****


*****docker-compose*****
docker-compose se comporta igual que python respecto a la sangria.
version: '3' -> la ultima version

services: -> enumeramos los diferentes servicios
configuramos compose de mariadb
  mariadb:
    container_name: mariadb -> nombre del contenedor
    networks:
      - inception   -> configuracion de red
    build:          -> path para contruirlo
      context: ./requeriments/mariaDB
      dockerfile: Dockerfile
    env_file: ./.env -> path de las variables de entorno
    volumes:
        - mariadb:var/lib/mysql -> carpeta donde se alojara en local
    restard: unless-stopped ->
    expose:
        - "3306"

  nginx:
    container_name: nginx
    volumes: /var/www/wordpress
    networks: 
      - inception
    depends_on:
      - wordpress
    build:
      context: ./requeriments/nginx
    dockerfile: Dockerfile
    env_file: ./.env
    ports:
      - "443:443"
    restart: on-failure


  wordpress:
    container_name: wordpress
    env_file: .env
    volumes:
      - wordpress:/var/www/wordpress
    networks:
      - inception
    build: 
    context: requirements/wordpress
    dockerfile: Dockerfile
    depends_on:
      - mariadb
    restart: on-failure
    expose: 
      - "9000"

  volumes:
    wordpress:
      driver: local
      driver_opts:
      type: 'none'
      o: 'bind'
      device: 'Users/login/data/wordpress'
    mariadb:
      driver: local
      driver_opts:
      type: 'none'
      o: 'bind'
      device: 'Users/login/data/mariadb'

  network:
    inception:
    drive: bridge


Este es un archivo Docker Compose que se utiliza para definir y gestionar múltiples servicios y contenedores de Docker para una aplicación web. Aquí está la explicación línea por línea:



version: '3'
Esto especifica la versión de Docker Compose que se va a utilizar. En este caso, se utiliza la versión 3.


services:
Aquí comienza la sección donde se definen los servicios y los contenedores que compondrán la aplicación.

  mariadb:
    container_name: mariadb
Se define un servicio llamado "mariadb" que utiliza la imagen del contenedor MariaDB. El contenedor tendrá el nombre "mariadb".


    networks:
      - inception
El contenedor se conectará a una red llamada "inception". Las redes en Docker permiten que los contenedores se comuniquen entre sí.


    build: 
      context: ./requeriments/mariaDB
Se especifica la ubicación de un Dockerfile que se utilizará para construir la imagen de MariaDB. El contexto de construcción es el directorio "./requeriments/mariaDB".


    dockerfile: Dockerfile
Se especifica el nombre del archivo Dockerfile a utilizar para construir la imagen.


    env_file: ./.env
Se carga un archivo de variables de entorno llamado ".env" para configurar las variables de entorno del contenedor MariaDB.


    volumes:
        - mariadb:var/lib/mysql
Se define un volumen llamado "mariadb" que se utilizará para persistir los datos de la base de datos MariaDB en el directorio "/var/lib/mysql" dentro del contenedor.


    restard: unless-stopped
Especifica la política de reinicio del contenedor. En este caso, el contenedor se reiniciará a menos que se detenga manualmente.


    expose:
        - "3306"
Expone el puerto 3306 del contenedor, que es el puerto por defecto utilizado por MariaDB.

Luego, se definen dos servicios más, "nginx" y "wordpress", de manera similar al servicio "mariadb", con configuraciones específicas para cada uno. Estos servicios están diseñados para servir una aplicación de WordPress.


  volumes:
    wordpress:
      driver: local
      driver_opts:
      type: 'none'
      o: 'bind'
      device: 'Users/login/data/wordpress'
    mariadb:
      driver: local
      driver_opts:
      type: 'none'
      o: 'bind'
      device: 'Users/login/data/mariadb'
Aquí se definen volúmenes llamados "wordpress" y "mariadb" que se utilizarán para persistir datos en directorios específicos en el host. Estos volúmenes se montarán en los contenedores según sea necesario.


  network:
    inception:
    drive: bridge
Finalmente, se define una red llamada "inception" que se utilizará para conectar los contenedores entre sí. Sin embargo, hay un error tipográfico en esta sección. Debería ser "driver" en lugar de "drive". La línea debería ser: "driver: bridge".

Este archivo Docker Compose define la configuración de tres servicios principales: MariaDB, Nginx y WordPress, y establece cómo se comunican entre sí y cómo persisten los datos. También se configuran las redes y volúmenes necesarios para la aplicación.

*****Correccion de fallos*****

version: '3'

services:
  mariadb:
    container_name: mariadb
    networks:
      - inception
    build: 
      context: ./requeriments/mariaDB
    dockerfile: Dockerfile
    env_file: ./.env
    volumes:
      - mariadb:/var/lib/mysql
    restart: unless-stopped
    expose:
      - "3306"

  nginx:
    container_name: nginx
    volumes:
      - /var/www/wordpress
    networks: 
      - inception
    depends_on:
      - wordpress
    build:
      context: ./requeriments/nginx
    dockerfile: Dockerfile
    env_file: ./.env
    ports:
      - "443:443"
    restart: on-failure

  wordpress:
    container_name: wordpress
    env_file: .env
    volumes:
      - wordpress:/var/www/wordpress
    networks:
      - inception
    build: 
      context: requirements/wordpress
    dockerfile: Dockerfile
    depends_on:
      - mariadb
    restart: on-failure
    ports:
      - "9000:9000"

volumes:
  wordpress:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/Users/login/data/wordpress'
  mariadb:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/Users/login/data/mariadb'

networks:
  inception:
    driver: bridge


otra guia
https://github.com/Forstman1/inception-42

show databases;
SELECT user, host FROM mysql.user;